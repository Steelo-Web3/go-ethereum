// Objective-C API for talking to github.com/ethereum/go-ethereum/mobile Go package.
//   gobind -lang=objc github.com/ethereum/go-ethereum/mobile
//
// File is generated by gobind. Do not edit.

#ifndef __Geth_H__
#define __Geth_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class GethAccount;
@class GethAccounts;
@class GethAddress;
@class GethAddresses;
@class GethBigInt;
@class GethBigInts;
@class GethBinaries;
@class GethBlock;
@class GethBloom;
@class GethBools;
@class GethBoundContract;
@class GethCallMsg;
@class GethCallOpts;
@class GethContext;
@class GethEnode;
@class GethEnodes;
@class GethEthereumClient;
@class GethFilterQuery;
@class GethHash;
@class GethHashes;
@class GethHeader;
@class GethHeaders;
@class GethInterface;
@class GethInterfaces;
@class GethKey;
@class GethKeyStore;
@class GethLog;
@class GethLogs;
@class GethMobileSigner;
@class GethNFT;
@class GethNFTSession;
@class GethNode;
@class GethNodeConfig;
@class GethNodeInfo;
@class GethNonce;
@class GethPeerInfo;
@class GethPeerInfos;
@class GethReceipt;
@class GethStrings;
@class GethSubscription;
@class GethSyncProgress;
@class GethTopics;
@class GethTransactOpts;
@class GethTransaction;
@class GethTransactions;
@class GethURL;
@class GethWallet;
@protocol GethFilterLogsHandler;
@class GethFilterLogsHandler;
@protocol GethNewHeadHandler;
@class GethNewHeadHandler;
@protocol GethSigner;
@class GethSigner;

@protocol GethFilterLogsHandler <NSObject>
- (void)onError:(NSString* _Nullable)failure;
- (void)onFilterLogs:(GethLog* _Nullable)log;
@end

@protocol GethNewHeadHandler <NSObject>
- (void)onError:(NSString* _Nullable)failure;
- (void)onNewHead:(GethHeader* _Nullable)header;
@end

@protocol GethSigner <NSObject>
- (GethAddress* _Nullable)ecRecover:(NSData* _Nullable)data sig:(NSData* _Nullable)sig error:(NSError* _Nullable* _Nullable)error;
- (GethTransaction* _Nullable)sign:(GethAddress* _Nullable)addr unsignedTx:(GethTransaction* _Nullable)unsignedTx error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Account represents a stored key.
 */
@interface GethAccount : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * GetAddress retrieves the address associated with the account.
 */
- (GethAddress* _Nullable)getAddress;
/**
 * GetURL retrieves the canonical URL of the account.
 */
- (NSString* _Nonnull)getURL;
@end

/**
 * Accounts represents a slice of accounts.
 */
@interface GethAccounts : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Get returns the account at the given index from the slice.
 */
- (GethAccount* _Nullable)get:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * Set sets the account at the given index in the slice.
 */
- (BOOL)set:(long)index account:(GethAccount* _Nullable)account error:(NSError* _Nullable* _Nullable)error;
/**
 * Size returns the number of accounts in the slice.
 */
- (long)size;
@end

/**
 * Address represents the 20 byte address of an Ethereum account.
 */
@interface GethAddress : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewAddressFromBytes converts a slice of bytes to a hash value.
 */
- (nullable instancetype)initFromBytes:(NSData* _Nullable)binary;
/**
 * NewAddressFromHex converts a hex string to a address value.
 */
- (nullable instancetype)initFromHex:(NSString* _Nullable)hex;
/**
 * GetBytes retrieves the byte representation of the address.
 */
- (NSData* _Nullable)getBytes;
/**
 * GetHex retrieves the hex string representation of the address.
 */
- (NSString* _Nonnull)getHex;
/**
 * SetBytes sets the specified slice of bytes as the address value.
 */
- (BOOL)setBytes:(NSData* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
/**
 * SetHex sets the specified hex string as the address value.
 */
- (BOOL)setHex:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
/**
 * String returns a printable representation of the address.
 */
- (NSString* _Nonnull)string;
@end

/**
 * Addresses represents a slice of addresses.
 */
@interface GethAddresses : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewAddresses creates a slice of uninitialized addresses.
 */
- (nullable instancetype)init:(long)size;
/**
 * NewAddressesEmpty creates an empty slice of Addresses values.
 */
- (nullable instancetype)initEmpty;
/**
 * Append adds a new address element to the end of the slice.
 */
- (void)append:(GethAddress* _Nullable)address;
/**
 * Get returns the address at the given index from the slice.
 */
- (GethAddress* _Nullable)get:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * Set sets the address at the given index in the slice.
 */
- (BOOL)set:(long)index address:(GethAddress* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
/**
 * Size returns the number of addresses in the slice.
 */
- (long)size;
@end

/**
 * A BigInt represents a signed multi-precision integer.
 */
@interface GethBigInt : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewBigInt allocates and returns a new BigInt set to x.
 */
- (nullable instancetype)init:(int64_t)x;
/**
 * NewBigIntFromString allocates and returns a new BigInt set to x
interpreted in the provided base.
 */
- (nullable instancetype)initFromString:(NSString* _Nullable)x base:(long)base;
/**
 * GetBytes returns the absolute value of x as a big-endian byte slice.
 */
- (NSData* _Nullable)getBytes;
/**
 * GetInt64 returns the int64 representation of x. If x cannot be represented in
an int64, the result is undefined.
 */
- (int64_t)getInt64;
/**
 * GetString returns the value of x as a formatted string in some number base.
 */
- (NSString* _Nonnull)getString:(long)base;
/**
 * SetBytes interprets buf as the bytes of a big-endian unsigned integer and sets
the big int to that value.
 */
- (void)setBytes:(NSData* _Nullable)buf;
/**
 * SetInt64 sets the big int to x.
 */
- (void)setInt64:(int64_t)x;
/**
 * SetString sets the big int to x.

The string prefix determines the actual conversion base. A prefix of "0x" or
"0X" selects base 16; the "0" prefix selects base 8, and a "0b" or "0B" prefix
selects base 2. Otherwise the selected base is 10.
 */
- (void)setString:(NSString* _Nullable)x base:(long)base;
/**
 * Sign returns:

	-1 if x <  0
	 0 if x == 0
	+1 if x >  0
 */
- (long)sign;
/**
 * String returns the value of x as a formatted decimal string.
 */
- (NSString* _Nonnull)string;
@end

/**
 * BigInts represents a slice of big ints.
 */
@interface GethBigInts : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewBigInts creates a slice of uninitialized big numbers.
 */
- (nullable instancetype)init:(long)size;
/**
 * Get returns the bigint at the given index from the slice.
 */
- (GethBigInt* _Nullable)get:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * Set sets the big int at the given index in the slice.
 */
- (BOOL)set:(long)index bigint:(GethBigInt* _Nullable)bigint error:(NSError* _Nullable* _Nullable)error;
/**
 * Size returns the number of big ints in the slice.
 */
- (long)size;
@end

/**
 * Binaries represents a slice of byte slice
 */
@interface GethBinaries : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Get returns the byte slice at the given index from the slice.
 */
- (NSData* _Nullable)get:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * Set sets the byte slice at the given index in the slice.
 */
- (BOOL)set:(long)index binary:(NSData* _Nullable)binary error:(NSError* _Nullable* _Nullable)error;
/**
 * Size returns the number of byte slice in the slice.
 */
- (long)size;
/**
 * String implements the Stringer interface.
 */
- (NSString* _Nonnull)string;
@end

/**
 * Block represents an entire block in the Ethereum blockchain.
 */
@interface GethBlock : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewBlockFromJSON parses a block from a JSON data dump.
 */
- (nullable instancetype)initFromJSON:(NSString* _Nullable)data;
/**
 * NewBlockFromRLP parses a block from an RLP data dump.
 */
- (nullable instancetype)initFromRLP:(NSData* _Nullable)data;
/**
 * EncodeJSON encodes a block into a JSON data dump.
 */
- (NSString* _Nonnull)encodeJSON:(NSError* _Nullable* _Nullable)error;
/**
 * EncodeRLP encodes a block into an RLP data dump.
 */
- (NSData* _Nullable)encodeRLP:(NSError* _Nullable* _Nullable)error;
- (GethBloom* _Nullable)getBloom;
- (GethAddress* _Nullable)getCoinbase;
- (GethBigInt* _Nullable)getDifficulty;
- (NSData* _Nullable)getExtra;
- (int64_t)getGasLimit;
- (int64_t)getGasUsed;
- (GethHash* _Nullable)getHash;
- (GethHeader* _Nullable)getHeader;
- (GethHash* _Nullable)getMixDigest;
- (int64_t)getNonce;
- (int64_t)getNumber;
- (GethHash* _Nullable)getParentHash;
- (GethHash* _Nullable)getReceiptHash;
- (GethHash* _Nullable)getRoot;
- (int64_t)getTime;
- (GethTransaction* _Nullable)getTransaction:(GethHash* _Nullable)hash;
- (GethTransactions* _Nullable)getTransactions;
- (GethHash* _Nullable)getTxHash;
- (GethHash* _Nullable)getUncleHash;
- (GethHeaders* _Nullable)getUncles;
/**
 * String returns a printable representation of the block.
 */
- (NSString* _Nonnull)string;
@end

/**
 * Bloom represents a 256 bit bloom filter.
 */
@interface GethBloom : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * GetBytes retrieves the byte representation of the bloom filter.
 */
- (NSData* _Nullable)getBytes;
/**
 * GetHex retrieves the hex string representation of the bloom filter.
 */
- (NSString* _Nonnull)getHex;
/**
 * String returns a printable representation of the bloom filter.
 */
- (NSString* _Nonnull)string;
@end

/**
 * Bools represents a slice of bool.
 */
@interface GethBools : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Get returns the bool at the given index from the slice.
 */
- (BOOL)get:(long)index b:(BOOL* _Nullable)b error:(NSError* _Nullable* _Nullable)error;
/**
 * Set sets the bool at the given index in the slice.
 */
- (BOOL)set:(long)index b:(BOOL)b error:(NSError* _Nullable* _Nullable)error;
/**
 * Size returns the number of bool in the slice.
 */
- (long)size;
/**
 * String implements the Stringer interface.
 */
- (NSString* _Nonnull)string;
@end

/**
 * BoundContract is the base wrapper object that reflects a contract on the
Ethereum network. It contains a collection of methods that are used by the
higher level contract bindings to operate.
 */
@interface GethBoundContract : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Call invokes the (constant) contract method with params as input values and
sets the output to result.
 */
- (BOOL)call:(GethCallOpts* _Nullable)opts out_:(GethInterfaces* _Nullable)out_ method:(NSString* _Nullable)method args:(GethInterfaces* _Nullable)args error:(NSError* _Nullable* _Nullable)error;
- (GethAddress* _Nullable)getAddress;
- (GethTransaction* _Nullable)getDeployer;
/**
 * RawTransact invokes the (paid) contract method with raw calldata as input values.
 */
- (GethTransaction* _Nullable)rawTransact:(GethTransactOpts* _Nullable)opts calldata:(NSData* _Nullable)calldata error:(NSError* _Nullable* _Nullable)error;
/**
 * Transact invokes the (paid) contract method with params as input values.
 */
- (GethTransaction* _Nullable)transact:(GethTransactOpts* _Nullable)opts method:(NSString* _Nullable)method args:(GethInterfaces* _Nullable)args error:(NSError* _Nullable* _Nullable)error;
/**
 * Transfer initiates a plain transaction to move funds to the contract, calling
its default method if one is available.
 */
- (GethTransaction* _Nullable)transfer:(GethTransactOpts* _Nullable)opts error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * CallMsg contains parameters for contract calls.
 */
@interface GethCallMsg : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewCallMsg creates an empty contract call parameter list.
 */
- (nullable instancetype)init;
- (NSData* _Nullable)getData;
- (GethAddress* _Nullable)getFrom;
- (int64_t)getGas;
- (GethBigInt* _Nullable)getGasPrice;
- (GethAddress* _Nullable)getTo;
- (GethBigInt* _Nullable)getValue;
- (void)setData:(NSData* _Nullable)data;
- (void)setFrom:(GethAddress* _Nullable)address;
- (void)setGas:(int64_t)gas;
- (void)setGasPrice:(GethBigInt* _Nullable)price;
- (void)setTo:(GethAddress* _Nullable)address;
- (void)setValue:(GethBigInt* _Nullable)value;
@end

/**
 * CallOpts is the collection of options to fine tune a contract call request.
 */
@interface GethCallOpts : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewCallOpts creates a new option set for contract calls.
 */
- (nullable instancetype)init;
- (int64_t)getGasLimit;
- (BOOL)isPending;
- (void)setContext:(GethContext* _Nullable)context;
- (void)setFrom:(GethAddress* _Nullable)addr;
- (void)setGasLimit:(int64_t)limit;
- (void)setPending:(BOOL)pending;
@end

/**
 * Context carries a deadline, a cancellation signal, and other values across API
boundaries.
 */
@interface GethContext : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewContext returns a non-nil, empty Context. It is never canceled, has no
values, and has no deadline. It is typically used by the main function,
initialization, and tests, and as the top-level Context for incoming requests.
 */
- (nullable instancetype)init;
/**
 * WithCancel returns a copy of the original context with cancellation mechanism
included.

Canceling this context releases resources associated with it, so code should
call cancel as soon as the operations running in this Context complete.
 */
- (GethContext* _Nullable)withCancel;
/**
 * WithDeadline returns a copy of the original context with the deadline adjusted
to be no later than the specified time.

Canceling this context releases resources associated with it, so code should
call cancel as soon as the operations running in this Context complete.
 */
- (GethContext* _Nullable)withDeadline:(int64_t)sec nsec:(int64_t)nsec;
/**
 * WithTimeout returns a copy of the original context with the deadline adjusted
to be no later than now + the duration specified.

Canceling this context releases resources associated with it, so code should
call cancel as soon as the operations running in this Context complete.
 */
- (GethContext* _Nullable)withTimeout:(int64_t)nsec;
@end

/**
 * Enode represents a host on the network.
 */
@interface GethEnode : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewEnode parses a node designator.

There are two basic forms of node designators
  - incomplete nodes, which only have the public key (node ID)
  - complete nodes, which contain the public key and IP/Port information

For incomplete nodes, the designator must look like one of these

   enode://<hex node id>
   <hex node id>

For complete nodes, the node ID is encoded in the username portion
of the URL, separated from the host by an @ sign. The hostname can
only be given as an IP address, DNS domain names are not allowed.
The port in the host name section is the TCP listening port. If the
TCP and UDP (discovery) ports differ, the UDP port is specified as
query parameter "discport".

In the following example, the node URL describes
a node with IP address 10.3.58.6, TCP listening port 30303
and UDP discovery port 30301.

   enode://<hex node id>@10.3.58.6:30303?discport=30301
 */
- (nullable instancetype)init:(NSString* _Nullable)rawurl;
@end

/**
 * Enodes represents a slice of accounts.
 */
@interface GethEnodes : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewEnodes creates a slice of uninitialized enodes.
 */
- (nullable instancetype)init:(long)size;
/**
 * NewEnodesEmpty creates an empty slice of Enode values.
 */
- (nullable instancetype)initEmpty;
/**
 * Append adds a new enode element to the end of the slice.
 */
- (void)append:(GethEnode* _Nullable)enode;
/**
 * Get returns the enode at the given index from the slice.
 */
- (GethEnode* _Nullable)get:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * Set sets the enode at the given index in the slice.
 */
- (BOOL)set:(long)index enode:(GethEnode* _Nullable)enode error:(NSError* _Nullable* _Nullable)error;
/**
 * Size returns the number of enodes in the slice.
 */
- (long)size;
@end

/**
 * EthereumClient provides access to the Ethereum APIs.
 */
@interface GethEthereumClient : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewEthereumClient connects a client to the given URL.
 */
- (nullable instancetype)init:(NSString* _Nullable)rawurl;
/**
 * CallContract executes a message call transaction, which is directly executed in the VM
of the node, but never mined into the blockchain.

blockNumber selects the block height at which the call runs. It can be <0, in which
case the code is taken from the latest known block. Note that state from very old
blocks might not be available.
 */
- (NSData* _Nullable)callContract:(GethContext* _Nullable)ctx msg:(GethCallMsg* _Nullable)msg number:(int64_t)number error:(NSError* _Nullable* _Nullable)error;
/**
 * EstimateGas tries to estimate the gas needed to execute a specific transaction based on
the current pending state of the backend blockchain. There is no guarantee that this is
the true gas limit requirement as other transactions may be added or removed by miners,
but it should provide a basis for setting a reasonable default.
 */
- (BOOL)estimateGas:(GethContext* _Nullable)ctx msg:(GethCallMsg* _Nullable)msg gas:(int64_t* _Nullable)gas error:(NSError* _Nullable* _Nullable)error;
/**
 * FilterLogs executes a filter query.
 */
- (GethLogs* _Nullable)filterLogs:(GethContext* _Nullable)ctx query:(GethFilterQuery* _Nullable)query error:(NSError* _Nullable* _Nullable)error;
/**
 * GetBalanceAt returns the wei balance of the given account.
The block number can be <0, in which case the balance is taken from the latest known block.
 */
- (GethBigInt* _Nullable)getBalanceAt:(GethContext* _Nullable)ctx account:(GethAddress* _Nullable)account number:(int64_t)number error:(NSError* _Nullable* _Nullable)error;
/**
 * GetBlockByHash returns the given full block.
 */
- (GethBlock* _Nullable)getBlockByHash:(GethContext* _Nullable)ctx hash:(GethHash* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
/**
 * GetBlockByNumber returns a block from the current canonical chain. If number is <0, the
latest known block is returned.
 */
- (GethBlock* _Nullable)getBlockByNumber:(GethContext* _Nullable)ctx number:(int64_t)number error:(NSError* _Nullable* _Nullable)error;
/**
 * GetCodeAt returns the contract code of the given account.
The block number can be <0, in which case the code is taken from the latest known block.
 */
- (NSData* _Nullable)getCodeAt:(GethContext* _Nullable)ctx account:(GethAddress* _Nullable)account number:(int64_t)number error:(NSError* _Nullable* _Nullable)error;
/**
 * GetHeaderByHash returns the block header with the given hash.
 */
- (GethHeader* _Nullable)getHeaderByHash:(GethContext* _Nullable)ctx hash:(GethHash* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
/**
 * GetHeaderByNumber returns a block header from the current canonical chain. If number is <0,
the latest known header is returned.
 */
- (GethHeader* _Nullable)getHeaderByNumber:(GethContext* _Nullable)ctx number:(int64_t)number error:(NSError* _Nullable* _Nullable)error;
/**
 * GetNonceAt returns the account nonce of the given account.
The block number can be <0, in which case the nonce is taken from the latest known block.
 */
- (BOOL)getNonceAt:(GethContext* _Nullable)ctx account:(GethAddress* _Nullable)account number:(int64_t)number nonce:(int64_t* _Nullable)nonce error:(NSError* _Nullable* _Nullable)error;
/**
 * GetPendingBalanceAt returns the wei balance of the given account in the pending state.
 */
- (GethBigInt* _Nullable)getPendingBalanceAt:(GethContext* _Nullable)ctx account:(GethAddress* _Nullable)account error:(NSError* _Nullable* _Nullable)error;
/**
 * GetPendingCodeAt returns the contract code of the given account in the pending state.
 */
- (NSData* _Nullable)getPendingCodeAt:(GethContext* _Nullable)ctx account:(GethAddress* _Nullable)account error:(NSError* _Nullable* _Nullable)error;
/**
 * GetPendingNonceAt returns the account nonce of the given account in the pending state.
This is the nonce that should be used for the next transaction.
 */
- (BOOL)getPendingNonceAt:(GethContext* _Nullable)ctx account:(GethAddress* _Nullable)account nonce:(int64_t* _Nullable)nonce error:(NSError* _Nullable* _Nullable)error;
/**
 * GetPendingStorageAt returns the value of key in the contract storage of the given account in the pending state.
 */
- (NSData* _Nullable)getPendingStorageAt:(GethContext* _Nullable)ctx account:(GethAddress* _Nullable)account key:(GethHash* _Nullable)key error:(NSError* _Nullable* _Nullable)error;
/**
 * GetPendingTransactionCount returns the total number of transactions in the pending state.
 */
- (BOOL)getPendingTransactionCount:(GethContext* _Nullable)ctx count:(long* _Nullable)count error:(NSError* _Nullable* _Nullable)error;
/**
 * GetStorageAt returns the value of key in the contract storage of the given account.
The block number can be <0, in which case the value is taken from the latest known block.
 */
- (NSData* _Nullable)getStorageAt:(GethContext* _Nullable)ctx account:(GethAddress* _Nullable)account key:(GethHash* _Nullable)key number:(int64_t)number error:(NSError* _Nullable* _Nullable)error;
/**
 * GetTransactionByHash returns the transaction with the given hash.
 */
- (GethTransaction* _Nullable)getTransactionByHash:(GethContext* _Nullable)ctx hash:(GethHash* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
/**
 * GetTransactionCount returns the total number of transactions in the given block.
 */
- (BOOL)getTransactionCount:(GethContext* _Nullable)ctx hash:(GethHash* _Nullable)hash count:(long* _Nullable)count error:(NSError* _Nullable* _Nullable)error;
/**
 * GetTransactionInBlock returns a single transaction at index in the given block.
 */
- (GethTransaction* _Nullable)getTransactionInBlock:(GethContext* _Nullable)ctx hash:(GethHash* _Nullable)hash index:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * GetTransactionReceipt returns the receipt of a transaction by transaction hash.
Note that the receipt is not available for pending transactions.
 */
- (GethReceipt* _Nullable)getTransactionReceipt:(GethContext* _Nullable)ctx hash:(GethHash* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
/**
 * GetTransactionSender returns the sender address of a transaction. The transaction must
be included in blockchain at the given block and index.
 */
- (GethAddress* _Nullable)getTransactionSender:(GethContext* _Nullable)ctx tx:(GethTransaction* _Nullable)tx blockhash:(GethHash* _Nullable)blockhash index:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * PendingCallContract executes a message call transaction using the EVM.
The state seen by the contract call is the pending state.
 */
- (NSData* _Nullable)pendingCallContract:(GethContext* _Nullable)ctx msg:(GethCallMsg* _Nullable)msg error:(NSError* _Nullable* _Nullable)error;
/**
 * SendTransaction injects a signed transaction into the pending pool for execution.

If the transaction was a contract creation use the TransactionReceipt method to get the
contract address after the transaction has been mined.
 */
- (BOOL)sendTransaction:(GethContext* _Nullable)ctx tx:(GethTransaction* _Nullable)tx error:(NSError* _Nullable* _Nullable)error;
/**
 * SubscribeFilterLogs subscribes to the results of a streaming filter query.
 */
- (GethSubscription* _Nullable)subscribeFilterLogs:(GethContext* _Nullable)ctx query:(GethFilterQuery* _Nullable)query handler:(id<GethFilterLogsHandler> _Nullable)handler buffer:(long)buffer error:(NSError* _Nullable* _Nullable)error;
/**
 * SubscribeNewHead subscribes to notifications about the current blockchain head
on the given channel.
 */
- (GethSubscription* _Nullable)subscribeNewHead:(GethContext* _Nullable)ctx handler:(id<GethNewHeadHandler> _Nullable)handler buffer:(long)buffer error:(NSError* _Nullable* _Nullable)error;
/**
 * SuggestGasPrice retrieves the currently suggested gas price to allow a timely
execution of a transaction.
 */
- (GethBigInt* _Nullable)suggestGasPrice:(GethContext* _Nullable)ctx error:(NSError* _Nullable* _Nullable)error;
/**
 * SyncProgress retrieves the current progress of the sync algorithm. If there's
no sync currently running, it returns nil.
 */
- (GethSyncProgress* _Nullable)syncProgress:(GethContext* _Nullable)ctx error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * FilterQuery contains options for contract log filtering.
 */
@interface GethFilterQuery : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewFilterQuery creates an empty filter query for contract log filtering.
 */
- (nullable instancetype)init;
- (GethAddresses* _Nullable)getAddresses;
- (GethBigInt* _Nullable)getFromBlock;
- (GethBigInt* _Nullable)getToBlock;
- (GethTopics* _Nullable)getTopics;
- (void)setAddresses:(GethAddresses* _Nullable)addresses;
- (void)setFromBlock:(GethBigInt* _Nullable)fromBlock;
- (void)setToBlock:(GethBigInt* _Nullable)toBlock;
- (void)setTopics:(GethTopics* _Nullable)topics;
@end

/**
 * Hash represents the 32 byte Keccak256 hash of arbitrary data.
 */
@interface GethHash : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewHashFromBytes converts a slice of bytes to a hash value.
 */
- (nullable instancetype)initFromBytes:(NSData* _Nullable)binary;
/**
 * NewHashFromHex converts a hex string to a hash value.
 */
- (nullable instancetype)initFromHex:(NSString* _Nullable)hex;
/**
 * GetBytes retrieves the byte representation of the hash.
 */
- (NSData* _Nullable)getBytes;
/**
 * GetHex retrieves the hex string representation of the hash.
 */
- (NSString* _Nonnull)getHex;
/**
 * SetBytes sets the specified slice of bytes as the hash value.
 */
- (BOOL)setBytes:(NSData* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
/**
 * SetHex sets the specified hex string as the hash value.
 */
- (BOOL)setHex:(NSString* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
/**
 * String implements Stringer interface for printable representation of the hash.
 */
- (NSString* _Nonnull)string;
@end

/**
 * Hashes represents a slice of hashes.
 */
@interface GethHashes : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewHashes creates a slice of uninitialized Hashes.
 */
- (nullable instancetype)init:(long)size;
/**
 * NewHashesEmpty creates an empty slice of Hashes values.
 */
- (nullable instancetype)initEmpty;
/**
 * Append adds a new Hash element to the end of the slice.
 */
- (void)append:(GethHash* _Nullable)hash;
/**
 * Get returns the hash at the given index from the slice.
 */
- (GethHash* _Nullable)get:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * Set sets the Hash at the given index in the slice.
 */
- (BOOL)set:(long)index hash:(GethHash* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
/**
 * Size returns the number of hashes in the slice.
 */
- (long)size;
@end

/**
 * Header represents a block header in the Ethereum blockchain.
 */
@interface GethHeader : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewHeaderFromJSON parses a header from a JSON data dump.
 */
- (nullable instancetype)initFromJSON:(NSString* _Nullable)data;
/**
 * NewHeaderFromRLP parses a header from an RLP data dump.
 */
- (nullable instancetype)initFromRLP:(NSData* _Nullable)data;
/**
 * EncodeJSON encodes a header into a JSON data dump.
 */
- (NSString* _Nonnull)encodeJSON:(NSError* _Nullable* _Nullable)error;
/**
 * EncodeRLP encodes a header into an RLP data dump.
 */
- (NSData* _Nullable)encodeRLP:(NSError* _Nullable* _Nullable)error;
- (GethBloom* _Nullable)getBloom;
- (GethAddress* _Nullable)getCoinbase;
- (GethBigInt* _Nullable)getDifficulty;
- (NSData* _Nullable)getExtra;
- (int64_t)getGasLimit;
- (int64_t)getGasUsed;
- (GethHash* _Nullable)getHash;
- (GethHash* _Nullable)getMixDigest;
- (GethNonce* _Nullable)getNonce;
- (int64_t)getNumber;
- (GethHash* _Nullable)getParentHash;
- (GethHash* _Nullable)getReceiptHash;
- (GethHash* _Nullable)getRoot;
- (int64_t)getTime;
- (GethHash* _Nullable)getTxHash;
- (GethHash* _Nullable)getUncleHash;
/**
 * String returns a printable representation of the header.
 */
- (NSString* _Nonnull)string;
@end

/**
 * Headers represents a slice of headers.
 */
@interface GethHeaders : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Get returns the header at the given index from the slice.
 */
- (GethHeader* _Nullable)get:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * Size returns the number of headers in the slice.
 */
- (long)size;
@end

/**
 * Interface represents a wrapped version of Go's interface{}, with the capacity
to store arbitrary data types.

Since it's impossible to get the arbitrary-ness converted between Go and mobile
platforms, we're using explicit getters and setters for the conversions. There
is of course no point in enumerating everything, just enough to support the
contract bindins requiring client side generated code.
 */
@interface GethInterface : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewInterface creates a new empty interface that can be used to pass around
generic types.
 */
- (nullable instancetype)init;
- (GethAddress* _Nullable)getAddress;
- (GethAddresses* _Nullable)getAddresses;
- (GethBigInt* _Nullable)getBigInt;
- (GethBigInts* _Nullable)getBigInts;
- (GethBinaries* _Nullable)getBinaries;
- (NSData* _Nullable)getBinary;
- (BOOL)getBool;
- (GethBools* _Nullable)getBools;
- (GethHash* _Nullable)getHash;
- (GethHashes* _Nullable)getHashes;
- (int16_t)getInt16;
- (GethBigInts* _Nullable)getInt16s;
- (int32_t)getInt32;
- (GethBigInts* _Nullable)getInt32s;
- (int64_t)getInt64;
- (GethBigInts* _Nullable)getInt64s;
- (int8_t)getInt8;
- (GethBigInts* _Nullable)getInt8s;
- (NSString* _Nonnull)getString;
- (GethStrings* _Nullable)getStrings;
- (GethBigInt* _Nullable)getUint16;
- (GethBigInts* _Nullable)getUint16s;
- (GethBigInt* _Nullable)getUint32;
- (GethBigInts* _Nullable)getUint32s;
- (GethBigInt* _Nullable)getUint64;
- (GethBigInts* _Nullable)getUint64s;
- (GethBigInt* _Nullable)getUint8;
- (GethBigInts* _Nullable)getUint8s;
- (void)setAddress:(GethAddress* _Nullable)address;
- (void)setAddresses:(GethAddresses* _Nullable)addrs;
- (void)setBigInt:(GethBigInt* _Nullable)bigint;
- (void)setBigInts:(GethBigInts* _Nullable)bigints;
- (void)setBinaries:(GethBinaries* _Nullable)binaries;
- (void)setBinary:(NSData* _Nullable)binary;
- (void)setBool:(BOOL)b;
- (void)setBools:(GethBools* _Nullable)bs;
- (void)setDefaultAddress;
- (void)setDefaultAddresses;
- (void)setDefaultBigInt;
- (void)setDefaultBigInts;
- (void)setDefaultBinaries;
- (void)setDefaultBinary;
- (void)setDefaultBool;
- (void)setDefaultBools;
- (void)setDefaultHash;
- (void)setDefaultHashes;
- (void)setDefaultInt16;
- (void)setDefaultInt16s;
- (void)setDefaultInt32;
- (void)setDefaultInt32s;
- (void)setDefaultInt64;
- (void)setDefaultInt64s;
- (void)setDefaultInt8;
- (void)setDefaultInt8s;
- (void)setDefaultString;
- (void)setDefaultStrings;
- (void)setDefaultUint16;
- (void)setDefaultUint16s;
- (void)setDefaultUint32;
- (void)setDefaultUint32s;
- (void)setDefaultUint64;
- (void)setDefaultUint64s;
- (void)setDefaultUint8;
- (void)setDefaultUint8s;
- (void)setHash:(GethHash* _Nullable)hash;
- (void)setHashes:(GethHashes* _Nullable)hashes;
- (void)setInt16:(int16_t)n;
- (void)setInt16s:(GethBigInts* _Nullable)bigints;
- (void)setInt32:(int32_t)n;
- (void)setInt32s:(GethBigInts* _Nullable)bigints;
- (void)setInt64:(int64_t)n;
- (void)setInt64s:(GethBigInts* _Nullable)bigints;
- (void)setInt8:(int8_t)n;
- (void)setInt8s:(GethBigInts* _Nullable)bigints;
- (void)setString:(NSString* _Nullable)str;
- (void)setStrings:(GethStrings* _Nullable)strs;
- (void)setUint16:(GethBigInt* _Nullable)bigint;
- (void)setUint16s:(GethBigInts* _Nullable)bigints;
- (void)setUint32:(GethBigInt* _Nullable)bigint;
- (void)setUint32s:(GethBigInts* _Nullable)bigints;
- (void)setUint64:(GethBigInt* _Nullable)bigint;
- (void)setUint64s:(GethBigInts* _Nullable)bigints;
- (void)setUint8:(GethBigInt* _Nullable)bigint;
- (void)setUint8s:(GethBigInts* _Nullable)bigints;
@end

/**
 * Interfaces is a slices of wrapped generic objects.
 */
@interface GethInterfaces : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewInterfaces creates a slice of uninitialized interfaces.
 */
- (nullable instancetype)init:(long)size;
/**
 * Get returns the bigint at the given index from the slice.
Notably the returned value can be changed without affecting the
interfaces itself.
 */
- (GethInterface* _Nullable)get:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * Set sets the big int at the given index in the slice.
 */
- (BOOL)set:(long)index object:(GethInterface* _Nullable)object error:(NSError* _Nullable* _Nullable)error;
/**
 * Size returns the number of interfaces in the slice.
 */
- (long)size;
@end

@interface GethKey : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
// skipped method Key.Address with unsupported parameter or return types

- (NSString* _Nonnull)privateKey;
@end

/**
 * KeyStore manages a key storage directory on disk.
 */
@interface GethKeyStore : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewKeyStore creates a keystore for the given directory.
 */
- (nullable instancetype)init:(NSString* _Nullable)keydir scryptN:(long)scryptN scryptP:(long)scryptP;
/**
 * DeleteAccount deletes the key matched by account if the passphrase is correct.
If a contains no filename, the address must match a unique key.
 */
- (BOOL)deleteAccount:(GethAccount* _Nullable)account passphrase:(NSString* _Nullable)passphrase error:(NSError* _Nullable* _Nullable)error;
/**
 * ExportKey exports as a JSON key, encrypted with newPassphrase.
 */
- (NSData* _Nullable)exportKey:(GethAccount* _Nullable)account passphrase:(NSString* _Nullable)passphrase newPassphrase:(NSString* _Nullable)newPassphrase error:(NSError* _Nullable* _Nullable)error;
/**
 * GetAccounts returns all key files present in the directory.
 */
- (GethAccounts* _Nullable)getAccounts;
/**
 * HasAddress reports whether a key with the given address is present.
 */
- (BOOL)hasAddress:(GethAddress* _Nullable)address;
/**
 * ImportECDSAKey stores the given encrypted JSON key into the key directory.
 */
- (GethAccount* _Nullable)importECDSAKey:(NSData* _Nullable)key passphrase:(NSString* _Nullable)passphrase error:(NSError* _Nullable* _Nullable)error;
/**
 * ImportKey stores the given encrypted JSON key into the key directory.
 */
- (GethAccount* _Nullable)importKey:(NSData* _Nullable)keyJSON passphrase:(NSString* _Nullable)passphrase newPassphrase:(NSString* _Nullable)newPassphrase error:(NSError* _Nullable* _Nullable)error;
/**
 * ImportPreSaleKey decrypts the given Ethereum presale wallet and stores
a key file in the key directory. The key file is encrypted with the same passphrase.
 */
- (GethAccount* _Nullable)importPreSaleKey:(NSData* _Nullable)keyJSON passphrase:(NSString* _Nullable)passphrase error:(NSError* _Nullable* _Nullable)error;
- (long)isUnlocked:(GethAccount* _Nullable)account;
/**
 * Lock removes the private key with the given address from memory.
 */
- (BOOL)lock:(GethAddress* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
/**
 * NewAccount generates a new key and stores it into the key directory,
encrypting it with the passphrase.
 */
- (GethAccount* _Nullable)newAccount:(NSString* _Nullable)passphrase error:(NSError* _Nullable* _Nullable)error;
/**
 * SignHash calculates a ECDSA signature for the given hash. The produced signature
is in the [R || S || V] format where V is 0 or 1.
 */
- (NSData* _Nullable)signHash:(GethAddress* _Nullable)address hash:(NSData* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
/**
 * SignHashPassphrase signs hash if the private key matching the given address can
be decrypted with the given passphrase. The produced signature is in the
[R || S || V] format where V is 0 or 1.
 */
- (NSData* _Nullable)signHashPassphrase:(GethAccount* _Nullable)account passphrase:(NSString* _Nullable)passphrase hash:(NSData* _Nullable)hash error:(NSError* _Nullable* _Nullable)error;
/**
 * SignTx signs the given transaction with the requested account.
 */
- (GethTransaction* _Nullable)signTx:(GethAccount* _Nullable)account tx:(GethTransaction* _Nullable)tx chainID:(GethBigInt* _Nullable)chainID error:(NSError* _Nullable* _Nullable)error;
/**
 * SignTxPassphrase signs the transaction if the private key matching the
given address can be decrypted with the given passphrase.
 */
- (GethTransaction* _Nullable)signTxPassphrase:(GethAccount* _Nullable)account passphrase:(NSString* _Nullable)passphrase tx:(GethTransaction* _Nullable)tx chainID:(GethBigInt* _Nullable)chainID error:(NSError* _Nullable* _Nullable)error;
/**
 * TimedUnlock unlocks the given account with the passphrase. The account stays
unlocked for the duration of timeout (nanoseconds). A timeout of 0 unlocks the
account until the program exits. The account must match a unique key file.

If the account address is already unlocked for a duration, TimedUnlock extends or
shortens the active unlock timeout. If the address was previously unlocked
indefinitely the timeout is not altered.
 */
- (BOOL)timedUnlock:(GethAccount* _Nullable)account passphrase:(NSString* _Nullable)passphrase timeout:(int64_t)timeout error:(NSError* _Nullable* _Nullable)error;
/**
 * Unlock unlocks the given account indefinitely.
 */
- (BOOL)unlock:(GethAccount* _Nullable)account passphrase:(NSString* _Nullable)passphrase error:(NSError* _Nullable* _Nullable)error;
/**
 * UpdateAccount changes the passphrase of an existing account.
 */
- (BOOL)updateAccount:(GethAccount* _Nullable)account passphrase:(NSString* _Nullable)passphrase newPassphrase:(NSString* _Nullable)newPassphrase error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Log represents a contract log event. These events are generated by the LOG
opcode and stored/indexed by the node.
 */
@interface GethLog : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
- (GethAddress* _Nullable)getAddress;
- (GethHash* _Nullable)getBlockHash;
- (int64_t)getBlockNumber;
- (NSData* _Nullable)getData;
- (long)getIndex;
- (GethHashes* _Nullable)getTopics;
- (GethHash* _Nullable)getTxHash;
- (long)getTxIndex;
@end

/**
 * Logs represents a slice of VM logs.
 */
@interface GethLogs : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Get returns the log at the given index from the slice.
 */
- (GethLog* _Nullable)get:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * Size returns the number of logs in the slice.
 */
- (long)size;
@end

@interface GethMobileSigner : NSObject <goSeqRefInterface, GethSigner> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * EcRecover recovers the address associated with the given sig.
Only compatible with `text/plain`
 */
- (GethAddress* _Nullable)ecRecover:(NSData* _Nullable)data sig:(NSData* _Nullable)sig error:(NSError* _Nullable* _Nullable)error;
- (GethTransaction* _Nullable)sign:(GethAddress* _Nullable)addr unsignedTx:(GethTransaction* _Nullable)unsignedTx error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * NFT is an auto generated Go binding around an Ethereum contract.
 */
@interface GethNFT : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewNFT creates a new instance of NFT, bound to a specific deployed contract.
 */
- (nullable instancetype)init:(GethAddress* _Nullable)address client:(GethEthereumClient* _Nullable)client;
/**
 * BurnToken is a paid mutator transaction binding the contract method 0x7b47ec1a.

Solidity: function burnToken(uint256 tokenID) returns()
 */
- (GethTransaction* _Nullable)burnToken:(GethTransactOpts* _Nullable)opts tokenID:(GethBigInt* _Nullable)tokenID error:(NSError* _Nullable* _Nullable)error;
/**
 * Call invokes the (constant) contract method with params as input values and
sets the output to result. The result type might be a single field for simple
returns, a slice of interfaces for anonymous returns and a struct for named
returns.
 */
- (BOOL)call:(GethCallOpts* _Nullable)opts result:(GethInterfaces* _Nullable)result method:(NSString* _Nullable)method params:(GethInterfaces* _Nullable)params error:(NSError* _Nullable* _Nullable)error;
/**
 * CreateTokenType is a paid mutator transaction binding the contract method 0x9799e525.

Solidity: function createTokenType(uint256 tokenTypeID, address authorizedMinter, string uri) returns()
 */
- (GethTransaction* _Nullable)createTokenType:(GethTransactOpts* _Nullable)opts tokenTypeID:(GethBigInt* _Nullable)tokenTypeID authorizedMinter:(GethAddress* _Nullable)authorizedMinter uri:(NSString* _Nullable)uri error:(NSError* _Nullable* _Nullable)error;
/**
 * GetIssued is a free data retrieval call binding the contract method 0xe895bc2f.

Solidity: function getIssued(address issuer) view returns(uint256[])
 */
- (GethBigInts* _Nullable)getIssued:(GethCallOpts* _Nullable)opts issuer:(GethAddress* _Nullable)issuer error:(NSError* _Nullable* _Nullable)error;
/**
 * GetWalletTokens is a free data retrieval call binding the contract method 0xfabc38be.

Solidity: function getWalletTokens(address holder) view returns(uint256[])
 */
- (GethBigInts* _Nullable)getWalletTokens:(GethCallOpts* _Nullable)opts holder:(GethAddress* _Nullable)holder error:(NSError* _Nullable* _Nullable)error;
/**
 * IssuerTokenTypes is a free data retrieval call binding the contract method 0x18130d4f.

Solidity: function issuerTokenTypes(address ) view returns(uint256 count)
 */
- (GethBigInt* _Nullable)issuerTokenTypes:(GethCallOpts* _Nullable)opts arg0:(GethAddress* _Nullable)arg0 error:(NSError* _Nullable* _Nullable)error;
/**
 * MintToken is a paid mutator transaction binding the contract method 0x87c6649c.

Solidity: function mintToken(address to, uint256 tokenTypeID, uint256 tokenID, string uri) returns()
 */
- (GethTransaction* _Nullable)mintToken:(GethTransactOpts* _Nullable)opts to:(GethAddress* _Nullable)to tokenTypeID:(GethBigInt* _Nullable)tokenTypeID tokenID:(GethBigInt* _Nullable)tokenID uri:(NSString* _Nullable)uri error:(NSError* _Nullable* _Nullable)error;
/**
 * TokenHolder is a free data retrieval call binding the contract method 0x862a4bf2.

Solidity: function tokenHolder(uint256 ) view returns(address)
 */
- (GethAddress* _Nullable)tokenHolder:(GethCallOpts* _Nullable)opts arg0:(GethBigInt* _Nullable)arg0 error:(NSError* _Nullable* _Nullable)error;
/**
 * TokenTokenType is a free data retrieval call binding the contract method 0xfd2da784.

Solidity: function tokenTokenType(uint256 ) view returns(uint256)
 */
- (GethBigInt* _Nullable)tokenTokenType:(GethCallOpts* _Nullable)opts arg0:(GethBigInt* _Nullable)arg0 error:(NSError* _Nullable* _Nullable)error;
/**
 * TokenTypeAuthorizedMinters is a free data retrieval call binding the contract method 0xca0cdc24.

Solidity: function tokenTypeAuthorizedMinters(uint256 , address ) view returns(bool)
 */
- (BOOL)tokenTypeAuthorizedMinters:(GethCallOpts* _Nullable)opts arg0:(GethBigInt* _Nullable)arg0 arg1:(GethAddress* _Nullable)arg1 ret0_:(BOOL* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * TokenTypeMintCount is a free data retrieval call binding the contract method 0x2d4d5da3.

Solidity: function tokenTypeMintCount(uint256 ) view returns(uint256)
 */
- (GethBigInt* _Nullable)tokenTypeMintCount:(GethCallOpts* _Nullable)opts arg0:(GethBigInt* _Nullable)arg0 error:(NSError* _Nullable* _Nullable)error;
/**
 * TokenTypeURI is a free data retrieval call binding the contract method 0x885a72a9.

Solidity: function tokenTypeURI(uint256 ) view returns(string)
 */
- (NSString* _Nonnull)tokenTypeURI:(GethCallOpts* _Nullable)opts arg0:(GethBigInt* _Nullable)arg0 error:(NSError* _Nullable* _Nullable)error;
/**
 * TokenTypes is a free data retrieval call binding the contract method 0x33f6832a.

Solidity: function tokenTypes(uint256 ) view returns(bool)
 */
- (BOOL)tokenTypes:(GethCallOpts* _Nullable)opts arg0:(GethBigInt* _Nullable)arg0 ret0_:(BOOL* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.

Solidity: function tokenURI(uint256 ) view returns(string)
 */
- (NSString* _Nonnull)tokenURI:(GethCallOpts* _Nullable)opts arg0:(GethBigInt* _Nullable)arg0 error:(NSError* _Nullable* _Nullable)error;
/**
 * Tokens is a free data retrieval call binding the contract method 0x4f64b2be.

Solidity: function tokens(uint256 ) view returns(bool)
 */
- (BOOL)tokens:(GethCallOpts* _Nullable)opts arg0:(GethBigInt* _Nullable)arg0 ret0_:(BOOL* _Nullable)ret0_ error:(NSError* _Nullable* _Nullable)error;
/**
 * Transact invokes the (paid) contract method with params as input values.
 */
- (GethTransaction* _Nullable)transact:(GethTransactOpts* _Nullable)opts method:(NSString* _Nullable)method params:(GethInterfaces* _Nullable)params error:(NSError* _Nullable* _Nullable)error;
/**
 * Transfer initiates a plain transaction to move funds to the contract, calling
its default method if one is available.
 */
- (GethTransaction* _Nullable)transfer:(GethTransactOpts* _Nullable)opts error:(NSError* _Nullable* _Nullable)error;
/**
 * TransferToken is a paid mutator transaction binding the contract method 0x1072cbea.

Solidity: function transferToken(address to, uint256 tokenID) returns()
 */
- (GethTransaction* _Nullable)transferToken:(GethTransactOpts* _Nullable)opts to:(GethAddress* _Nullable)to tokenID:(GethBigInt* _Nullable)tokenID error:(NSError* _Nullable* _Nullable)error;
// skipped method NFT.Wallets with unsupported parameter or return types

@end

/**
 * NFTSession is an auto generated Go binding around an Ethereum contract,
with pre-set call and transact options.
 */
@interface GethNFTSession : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@end

/**
 * Node represents a Geth Ethereum node instance.
 */
@interface GethNode : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewNode creates and configures a new Geth node.
 */
- (nullable instancetype)init:(NSString* _Nullable)datadir config:(GethNodeConfig* _Nullable)config;
/**
 * Close terminates a running node along with all it's services, tearing internal state
down. It is not possible to restart a closed node.
 */
- (BOOL)close:(NSError* _Nullable* _Nullable)error;
/**
 * GetEthereumClient retrieves a client to access the Ethereum subsystem.
 */
- (GethEthereumClient* _Nullable)getEthereumClient:(NSError* _Nullable* _Nullable)error;
/**
 * GetNodeInfo gathers and returns a collection of metadata known about the host.
 */
- (GethNodeInfo* _Nullable)getNodeInfo;
/**
 * GetPeersInfo returns an array of metadata objects describing connected peers.
 */
- (GethPeerInfos* _Nullable)getPeersInfo;
/**
 * Start creates a live P2P node and starts running it.
 */
- (BOOL)start:(NSError* _Nullable* _Nullable)error;
@end

/**
 * NodeConfig represents the collection of configuration values to fine tune the Geth
node embedded into a mobile process. The available values are a subset of the
entire API provided by go-ethereum to reduce the maintenance surface and dev
complexity.
 */
@interface GethNodeConfig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewNodeConfig creates a new node option set, initialized to the default values.
 */
- (nullable instancetype)init;
/**
 * Bootstrap nodes used to establish connectivity with the rest of the network.
 */
@property (nonatomic) GethEnodes* _Nullable bootstrapNodes;
/**
 * MaxPeers is the maximum number of peers that can be connected. If this is
set to zero, then only the configured static and trusted peers can connect.
 */
@property (nonatomic) long maxPeers;
/**
 * EthereumEnabled specifies whether the node should run the Ethereum protocol.
 */
@property (nonatomic) BOOL ethereumEnabled;
/**
 * EthereumNetworkID is the network identifier used by the Ethereum protocol to
decide if remote peers should be accepted or not.
 */
@property (nonatomic) int64_t ethereumNetworkID;
/**
 * EthereumGenesis is the genesis JSON to use to seed the blockchain with. An
empty genesis state is equivalent to using the mainnet's state.
 */
@property (nonatomic) NSString* _Nonnull ethereumGenesis;
/**
 * EthereumDatabaseCache is the system memory in MB to allocate for database caching.
A minimum of 16MB is always reserved.
 */
@property (nonatomic) long ethereumDatabaseCache;
/**
 * EthereumNetStats is a netstats connection string to use to report various
chain, transaction and node stats to a monitoring server.

It has the form "nodename:secret@host:port"
 */
@property (nonatomic) NSString* _Nonnull ethereumNetStats;
/**
 * Listening address of pprof server.
 */
@property (nonatomic) NSString* _Nonnull pprofAddress;
/**
 * AddBootstrapNode adds an additional bootstrap node to the node config.
 */
- (void)addBootstrapNode:(GethEnode* _Nullable)node;
/**
 * EncodeJSON encodes a NodeConfig into a JSON data dump.
 */
- (NSString* _Nonnull)encodeJSON:(NSError* _Nullable* _Nullable)error;
/**
 * String returns a printable representation of the node config.
 */
- (NSString* _Nonnull)string;
@end

/**
 * NodeInfo represents pi short summary of the information known about the host.
 */
@interface GethNodeInfo : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
- (long)getDiscoveryPort;
- (NSString* _Nonnull)getEnode;
- (NSString* _Nonnull)getID;
- (NSString* _Nonnull)getIP;
- (NSString* _Nonnull)getListenerAddress;
- (long)getListenerPort;
- (NSString* _Nonnull)getName;
- (GethStrings* _Nullable)getProtocols;
@end

/**
 * A Nonce is a 64-bit hash which proves (combined with the mix-hash) that
a sufficient amount of computation has been carried out on a block.
 */
@interface GethNonce : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * GetBytes retrieves the byte representation of the block nonce.
 */
- (NSData* _Nullable)getBytes;
/**
 * GetHex retrieves the hex string representation of the block nonce.
 */
- (NSString* _Nonnull)getHex;
/**
 * String returns a printable representation of the nonce.
 */
- (NSString* _Nonnull)string;
@end

/**
 * PeerInfo represents pi short summary of the information known about pi connected peer.
 */
@interface GethPeerInfo : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
- (GethStrings* _Nullable)getCaps;
- (NSString* _Nonnull)getID;
- (NSString* _Nonnull)getLocalAddress;
- (NSString* _Nonnull)getName;
- (NSString* _Nonnull)getRemoteAddress;
@end

/**
 * PeerInfos represents a slice of infos about remote peers.
 */
@interface GethPeerInfos : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Get returns the peer info at the given index from the slice.
 */
- (GethPeerInfo* _Nullable)get:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * Size returns the number of peer info entries in the slice.
 */
- (long)size;
@end

/**
 * Receipt represents the results of a transaction.
 */
@interface GethReceipt : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewReceiptFromJSON parses a transaction receipt from a JSON data dump.
 */
- (nullable instancetype)initFromJSON:(NSString* _Nullable)data;
/**
 * NewReceiptFromRLP parses a transaction receipt from an RLP data dump.
 */
- (nullable instancetype)initFromRLP:(NSData* _Nullable)data;
/**
 * EncodeJSON encodes a transaction receipt into a JSON data dump.
 */
- (NSString* _Nonnull)encodeJSON:(NSError* _Nullable* _Nullable)error;
/**
 * EncodeRLP encodes a transaction receipt into an RLP data dump.
 */
- (NSData* _Nullable)encodeRLP:(NSError* _Nullable* _Nullable)error;
- (GethBloom* _Nullable)getBloom;
- (GethAddress* _Nullable)getContractAddress;
- (int64_t)getCumulativeGasUsed;
- (int64_t)getGasUsed;
- (GethLogs* _Nullable)getLogs;
- (NSData* _Nullable)getPostState;
- (long)getStatus;
- (GethHash* _Nullable)getTxHash;
/**
 * String returns a printable representation of the receipt.
 */
- (NSString* _Nonnull)string;
@end

/**
 * Strings represents s slice of strs.
 */
@interface GethStrings : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Get returns the string at the given index from the slice.
 */
- (NSString* _Nonnull)get:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * Set sets the string at the given index in the slice.
 */
- (BOOL)set:(long)index str:(NSString* _Nullable)str error:(NSError* _Nullable* _Nullable)error;
/**
 * Size returns the number of strs in the slice.
 */
- (long)size;
/**
 * String implements the Stringer interface.
 */
- (NSString* _Nonnull)string;
@end

/**
 * Subscription represents an event subscription where events are
delivered on a data channel.
 */
@interface GethSubscription : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Unsubscribe cancels the sending of events to the data channel
and closes the error channel.
 */
- (void)unsubscribe;
@end

/**
 * SyncProgress gives progress indications when the node is synchronising with
the Ethereum network.
 */
@interface GethSyncProgress : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
- (int64_t)getCurrentBlock;
- (int64_t)getHealedBytecodeBytes;
- (int64_t)getHealedBytecodes;
- (int64_t)getHealedTrienodeBytes;
- (int64_t)getHealedTrienodes;
- (int64_t)getHealingBytecode;
- (int64_t)getHealingTrienodes;
- (int64_t)getHighestBlock;
- (int64_t)getStartingBlock;
- (int64_t)getSyncedAccountBytes;
- (int64_t)getSyncedAccounts;
- (int64_t)getSyncedBytecodeBytes;
- (int64_t)getSyncedBytecodes;
- (int64_t)getSyncedStorage;
- (int64_t)getSyncedStorageBytes;
@end

/**
 * Topics is a set of topic lists to filter events with.
 */
@interface GethTopics : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewTopics creates a slice of uninitialized Topics.
 */
- (nullable instancetype)init:(long)size;
/**
 * NewTopicsEmpty creates an empty slice of Topics values.
 */
- (nullable instancetype)initEmpty;
/**
 * Append adds a new topic list to the end of the slice.
 */
- (void)append:(GethHashes* _Nullable)topics;
/**
 * Get returns the topic list at the given index from the slice.
 */
- (GethHashes* _Nullable)get:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * Set sets the topic list at the given index in the slice.
 */
- (BOOL)set:(long)index topics:(GethHashes* _Nullable)topics error:(NSError* _Nullable* _Nullable)error;
/**
 * Size returns the number of topic lists inside the set
 */
- (long)size;
@end

/**
 * TransactOpts is the collection of authorization data required to create a
valid Ethereum transaction.
 */
@interface GethTransactOpts : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewTransactOpts creates a new option set for contract transaction.
 */
- (nullable instancetype)init;
- (GethAddress* _Nullable)getFrom;
- (int64_t)getGasLimit;
- (GethBigInt* _Nullable)getGasPrice;
- (int64_t)getNonce;
- (GethBigInt* _Nullable)getValue;
- (void)setContext:(GethContext* _Nullable)context;
- (void)setFrom:(GethAddress* _Nullable)from;
- (void)setGasLimit:(int64_t)limit;
- (void)setGasPrice:(GethBigInt* _Nullable)price;
- (void)setNonce:(int64_t)nonce;
- (void)setSigner:(id<GethSigner> _Nullable)s;
- (void)setValue:(GethBigInt* _Nullable)value;
@end

/**
 * Transaction represents a single Ethereum transaction.
 */
@interface GethTransaction : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewTransaction creates a new transaction with the given properties. Contracts
can be created by transacting with a nil recipient.
 */
- (nullable instancetype)init:(int64_t)nonce to:(GethAddress* _Nullable)to amount:(GethBigInt* _Nullable)amount gasLimit:(int64_t)gasLimit gasPrice:(GethBigInt* _Nullable)gasPrice data:(NSData* _Nullable)data;
/**
 * NewTransactionFromJSON parses a transaction from a JSON data dump.
 */
- (nullable instancetype)initFromJSON:(NSString* _Nullable)data;
/**
 * NewTransactionFromRLP parses a transaction from an RLP data dump.
 */
- (nullable instancetype)initFromRLP:(NSData* _Nullable)data;
/**
 * EncodeJSON encodes a transaction into a JSON data dump.
 */
- (NSString* _Nonnull)encodeJSON:(NSError* _Nullable* _Nullable)error;
/**
 * EncodeRLP encodes a transaction into an RLP data dump.
 */
- (NSData* _Nullable)encodeRLP:(NSError* _Nullable* _Nullable)error;
- (GethBigInt* _Nullable)getCost;
- (NSData* _Nullable)getData;
- (int64_t)getGas;
- (GethBigInt* _Nullable)getGasPrice;
- (GethHash* _Nullable)getHash;
- (int64_t)getNonce;
- (GethAddress* _Nullable)getTo;
- (GethBigInt* _Nullable)getValue;
/**
 * String returns a printable representation of the transaction.
 */
- (NSString* _Nonnull)string;
- (GethTransaction* _Nullable)withSignature:(NSData* _Nullable)sig chainID:(GethBigInt* _Nullable)chainID error:(NSError* _Nullable* _Nullable)error;
@end

/**
 * Transactions represents a slice of transactions.
 */
@interface GethTransactions : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
/**
 * Get returns the transaction at the given index from the slice.
 */
- (GethTransaction* _Nullable)get:(long)index error:(NSError* _Nullable* _Nullable)error;
/**
 * Size returns the number of transactions in the slice.
 */
- (long)size;
@end

@interface GethURL : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@end

@interface GethWallet : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@end

FOUNDATION_EXPORT const long GethAccountStatus_Locked;
FOUNDATION_EXPORT const long GethAccountStatus_NotFound;
FOUNDATION_EXPORT const long GethAccountStatus_Unlocked;
/**
 * LightScryptN is the N parameter of Scrypt encryption algorithm, using 4MB
memory and taking approximately 100ms CPU time on a modern processor.
 */
FOUNDATION_EXPORT const long GethLightScryptN;
/**
 * LightScryptP is the P parameter of Scrypt encryption algorithm, using 4MB
memory and taking approximately 100ms CPU time on a modern processor.
 */
FOUNDATION_EXPORT const long GethLightScryptP;
/**
 * StandardScryptN is the N parameter of Scrypt encryption algorithm, using 256MB
memory and taking approximately 1s CPU time on a modern processor.
 */
FOUNDATION_EXPORT const long GethStandardScryptN;
/**
 * StandardScryptP is the P parameter of Scrypt encryption algorithm, using 256MB
memory and taking approximately 1s CPU time on a modern processor.
 */
FOUNDATION_EXPORT const long GethStandardScryptP;

@interface Geth : NSObject
/**
 * NftABI is the input ABI used to generate the binding from
 */
+ (NSString* _Nonnull) nftABI;
+ (void) setNftABI:(NSString* _Nonnull)v;

// skipped variable NftMetaData with unsupported type: *github.com/ethereum/go-ethereum/accounts/abi/bind.MetaData

@end

/**
 * BindContract creates a low level contract interface through which calls and
transactions may be made through.
 */
FOUNDATION_EXPORT GethBoundContract* _Nullable GethBindContract(GethAddress* _Nullable address, NSString* _Nullable abiJSON, GethEthereumClient* _Nullable client, NSError* _Nullable* _Nullable error);

/**
 * DecodeFromHex decodes a hex string with 0x prefix.
 */
FOUNDATION_EXPORT NSData* _Nullable GethDecodeFromHex(NSString* _Nullable s, NSError* _Nullable* _Nullable error);

/**
 * DeployContract deploys a contract onto the Ethereum blockchain and binds the
deployment address with a wrapper.
 */
FOUNDATION_EXPORT GethBoundContract* _Nullable GethDeployContract(GethTransactOpts* _Nullable opts, NSString* _Nullable abiJSON, NSData* _Nullable bytecode, GethEthereumClient* _Nullable client, GethInterfaces* _Nullable args, NSError* _Nullable* _Nullable error);

/**
 * Returns the address for the Account that was used to create the signature.

Note, this function is compatible with eth_sign and personal_sign. As such it recovers
the address of:
hash = keccak256("\x19${byteVersion}Ethereum Signed Message:\n${message length}${message}")
addr = ecrecover(hash, signature)

Note, the signature must conform to the secp256k1 curve R, S and V values, where
the V value must be be 27 or 28 for legacy reasons.

https://github.com/ethereum/go-ethereum/wiki/Management-APIs#personal_ecRecover
 */
FOUNDATION_EXPORT GethAddress* _Nullable GethEcRecover(NSData* _Nullable data, NSData* _Nullable sig, NSError* _Nullable* _Nullable error);

/**
 * EncodeToHex encodes b as a hex string with 0x prefix.
 */
FOUNDATION_EXPORT NSString* _Nonnull GethEncodeToHex(NSData* _Nullable b);

FOUNDATION_EXPORT NSString* _Nonnull GethMsgFmt(NSData* _Nullable data);

// skipped function NewAccount with unsupported parameter or return types


/**
 * NewAddressFromBytes converts a slice of bytes to a hash value.
 */
FOUNDATION_EXPORT GethAddress* _Nullable GethNewAddressFromBytes(NSData* _Nullable binary, NSError* _Nullable* _Nullable error);

/**
 * NewAddressFromHex converts a hex string to a address value.
 */
FOUNDATION_EXPORT GethAddress* _Nullable GethNewAddressFromHex(NSString* _Nullable hex, NSError* _Nullable* _Nullable error);

/**
 * NewAddresses creates a slice of uninitialized addresses.
 */
FOUNDATION_EXPORT GethAddresses* _Nullable GethNewAddresses(long size);

/**
 * NewAddressesEmpty creates an empty slice of Addresses values.
 */
FOUNDATION_EXPORT GethAddresses* _Nullable GethNewAddressesEmpty(void);

/**
 * NewBigInt allocates and returns a new BigInt set to x.
 */
FOUNDATION_EXPORT GethBigInt* _Nullable GethNewBigInt(int64_t x);

/**
 * NewBigIntFromString allocates and returns a new BigInt set to x
interpreted in the provided base.
 */
FOUNDATION_EXPORT GethBigInt* _Nullable GethNewBigIntFromString(NSString* _Nullable x, long base);

/**
 * NewBigInts creates a slice of uninitialized big numbers.
 */
FOUNDATION_EXPORT GethBigInts* _Nullable GethNewBigInts(long size);

/**
 * NewBlockFromJSON parses a block from a JSON data dump.
 */
FOUNDATION_EXPORT GethBlock* _Nullable GethNewBlockFromJSON(NSString* _Nullable data, NSError* _Nullable* _Nullable error);

/**
 * NewBlockFromRLP parses a block from an RLP data dump.
 */
FOUNDATION_EXPORT GethBlock* _Nullable GethNewBlockFromRLP(NSData* _Nullable data, NSError* _Nullable* _Nullable error);

/**
 * NewCallMsg creates an empty contract call parameter list.
 */
FOUNDATION_EXPORT GethCallMsg* _Nullable GethNewCallMsg(void);

/**
 * NewCallOpts creates a new option set for contract calls.
 */
FOUNDATION_EXPORT GethCallOpts* _Nullable GethNewCallOpts(void);

/**
 * NewContext returns a non-nil, empty Context. It is never canceled, has no
values, and has no deadline. It is typically used by the main function,
initialization, and tests, and as the top-level Context for incoming requests.
 */
FOUNDATION_EXPORT GethContext* _Nullable GethNewContext(void);

/**
 * NewContractCreation creates a new transaction for deploying a new contract with
the given properties.
 */
FOUNDATION_EXPORT GethTransaction* _Nullable GethNewContractCreation(int64_t nonce, GethBigInt* _Nullable amount, int64_t gasLimit, GethBigInt* _Nullable gasPrice, NSData* _Nullable data);

/**
 * NewEnode parses a node designator.

There are two basic forms of node designators
  - incomplete nodes, which only have the public key (node ID)
  - complete nodes, which contain the public key and IP/Port information

For incomplete nodes, the designator must look like one of these

   enode://<hex node id>
   <hex node id>

For complete nodes, the node ID is encoded in the username portion
of the URL, separated from the host by an @ sign. The hostname can
only be given as an IP address, DNS domain names are not allowed.
The port in the host name section is the TCP listening port. If the
TCP and UDP (discovery) ports differ, the UDP port is specified as
query parameter "discport".

In the following example, the node URL describes
a node with IP address 10.3.58.6, TCP listening port 30303
and UDP discovery port 30301.

   enode://<hex node id>@10.3.58.6:30303?discport=30301
 */
FOUNDATION_EXPORT GethEnode* _Nullable GethNewEnode(NSString* _Nullable rawurl, NSError* _Nullable* _Nullable error);

/**
 * NewEnodes creates a slice of uninitialized enodes.
 */
FOUNDATION_EXPORT GethEnodes* _Nullable GethNewEnodes(long size);

/**
 * NewEnodesEmpty creates an empty slice of Enode values.
 */
FOUNDATION_EXPORT GethEnodes* _Nullable GethNewEnodesEmpty(void);

/**
 * NewEthereumClient connects a client to the given URL.
 */
FOUNDATION_EXPORT GethEthereumClient* _Nullable GethNewEthereumClient(NSString* _Nullable rawurl, NSError* _Nullable* _Nullable error);

/**
 * NewFilterQuery creates an empty filter query for contract log filtering.
 */
FOUNDATION_EXPORT GethFilterQuery* _Nullable GethNewFilterQuery(void);

/**
 * NewHashFromBytes converts a slice of bytes to a hash value.
 */
FOUNDATION_EXPORT GethHash* _Nullable GethNewHashFromBytes(NSData* _Nullable binary, NSError* _Nullable* _Nullable error);

/**
 * NewHashFromHex converts a hex string to a hash value.
 */
FOUNDATION_EXPORT GethHash* _Nullable GethNewHashFromHex(NSString* _Nullable hex, NSError* _Nullable* _Nullable error);

/**
 * NewHashes creates a slice of uninitialized Hashes.
 */
FOUNDATION_EXPORT GethHashes* _Nullable GethNewHashes(long size);

/**
 * NewHashesEmpty creates an empty slice of Hashes values.
 */
FOUNDATION_EXPORT GethHashes* _Nullable GethNewHashesEmpty(void);

/**
 * NewHeaderFromJSON parses a header from a JSON data dump.
 */
FOUNDATION_EXPORT GethHeader* _Nullable GethNewHeaderFromJSON(NSString* _Nullable data, NSError* _Nullable* _Nullable error);

/**
 * NewHeaderFromRLP parses a header from an RLP data dump.
 */
FOUNDATION_EXPORT GethHeader* _Nullable GethNewHeaderFromRLP(NSData* _Nullable data, NSError* _Nullable* _Nullable error);

/**
 * NewInterface creates a new empty interface that can be used to pass around
generic types.
 */
FOUNDATION_EXPORT GethInterface* _Nullable GethNewInterface(void);

/**
 * NewInterfaces creates a slice of uninitialized interfaces.
 */
FOUNDATION_EXPORT GethInterfaces* _Nullable GethNewInterfaces(long size);

/**
 * NewKeyStore creates a keystore for the given directory.
 */
FOUNDATION_EXPORT GethKeyStore* _Nullable GethNewKeyStore(NSString* _Nullable keydir, long scryptN, long scryptP);

/**
 * NewKeyedTransactOpts is a utility method to easily create a transaction signer
from a single private key.
 */
FOUNDATION_EXPORT GethTransactOpts* _Nullable GethNewKeyedTransactOpts(NSData* _Nullable keyJson, NSString* _Nullable passphrase, GethBigInt* _Nullable chainID, NSError* _Nullable* _Nullable error);

/**
 * NewNFT creates a new instance of NFT, bound to a specific deployed contract.
 */
FOUNDATION_EXPORT GethNFT* _Nullable GethNewNFT(GethAddress* _Nullable address, GethEthereumClient* _Nullable client, NSError* _Nullable* _Nullable error);

/**
 * NewNode creates and configures a new Geth node.
 */
FOUNDATION_EXPORT GethNode* _Nullable GethNewNode(NSString* _Nullable datadir, GethNodeConfig* _Nullable config, NSError* _Nullable* _Nullable error);

/**
 * NewNodeConfig creates a new node option set, initialized to the default values.
 */
FOUNDATION_EXPORT GethNodeConfig* _Nullable GethNewNodeConfig(void);

/**
 * NewReceiptFromJSON parses a transaction receipt from a JSON data dump.
 */
FOUNDATION_EXPORT GethReceipt* _Nullable GethNewReceiptFromJSON(NSString* _Nullable data, NSError* _Nullable* _Nullable error);

/**
 * NewReceiptFromRLP parses a transaction receipt from an RLP data dump.
 */
FOUNDATION_EXPORT GethReceipt* _Nullable GethNewReceiptFromRLP(NSData* _Nullable data, NSError* _Nullable* _Nullable error);

/**
 * NewTopics creates a slice of uninitialized Topics.
 */
FOUNDATION_EXPORT GethTopics* _Nullable GethNewTopics(long size);

/**
 * NewTopicsEmpty creates an empty slice of Topics values.
 */
FOUNDATION_EXPORT GethTopics* _Nullable GethNewTopicsEmpty(void);

/**
 * NewTransactOpts creates a new option set for contract transaction.
 */
FOUNDATION_EXPORT GethTransactOpts* _Nullable GethNewTransactOpts(void);

/**
 * NewTransaction creates a new transaction with the given properties. Contracts
can be created by transacting with a nil recipient.
 */
FOUNDATION_EXPORT GethTransaction* _Nullable GethNewTransaction(int64_t nonce, GethAddress* _Nullable to, GethBigInt* _Nullable amount, int64_t gasLimit, GethBigInt* _Nullable gasPrice, NSData* _Nullable data);

/**
 * NewTransactionFromJSON parses a transaction from a JSON data dump.
 */
FOUNDATION_EXPORT GethTransaction* _Nullable GethNewTransactionFromJSON(NSString* _Nullable data, NSError* _Nullable* _Nullable error);

/**
 * NewTransactionFromRLP parses a transaction from an RLP data dump.
 */
FOUNDATION_EXPORT GethTransaction* _Nullable GethNewTransactionFromRLP(NSData* _Nullable data, NSError* _Nullable* _Nullable error);

/**
 * SetVerbosity sets the global verbosity level (between 0 and 6 - see logger/verbosity.go).
 */
FOUNDATION_EXPORT void GethSetVerbosity(long level);

/**
 * TextHash is a helper function that calculates a hash for the given message that can be
safely used to calculate a signature from.

The hash is calculated as
  keccak256("\x19Ethereum Signed Message:\n"${message length}${message}).

This gives context to the signed message and prevents signing of transactions.
 */
FOUNDATION_EXPORT NSData* _Nullable GethTextHash(NSData* _Nullable data);

@class GethFilterLogsHandler;

@class GethNewHeadHandler;

@class GethSigner;

/**
 * FilterLogsHandler is a client-side subscription callback to invoke on events and
subscription failure.
 */
@interface GethFilterLogsHandler : NSObject <goSeqRefInterface, GethFilterLogsHandler> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)onError:(NSString* _Nullable)failure;
- (void)onFilterLogs:(GethLog* _Nullable)log;
@end

/**
 * NewHeadHandler is a client-side subscription callback to invoke on events and
subscription failure.
 */
@interface GethNewHeadHandler : NSObject <goSeqRefInterface, GethNewHeadHandler> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (void)onError:(NSString* _Nullable)failure;
- (void)onNewHead:(GethHeader* _Nullable)header;
@end

/**
 * Signer is an interface defining the callback when a contract requires a
method to sign the transaction before submission.
 */
@interface GethSigner : NSObject <goSeqRefInterface, GethSigner> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (GethAddress* _Nullable)ecRecover:(NSData* _Nullable)data sig:(NSData* _Nullable)sig error:(NSError* _Nullable* _Nullable)error;
- (GethTransaction* _Nullable)sign:(GethAddress* _Nullable)addr unsignedTx:(GethTransaction* _Nullable)unsignedTx error:(NSError* _Nullable* _Nullable)error;
@end

#endif
